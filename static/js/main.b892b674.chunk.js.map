{"version":3,"sources":["Config/graphqlClient.ts","Components/Layout/Layout.tsx","Routes/HomePage/HomePage.tsx","Routes/ContinentsPage/ContinentsPage.tsx","Routes/CountriesPage/CountriesPage.tsx","Routes/NotFoundPage/NotFoundPage.tsx","Components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","ApolloClient","uri","cache","InMemoryCache","Layout","to","HomePage","ContinentsPage","useState","continents","setContinents","useEffect","query","gql","then","result","data","catch","err","console","error","length","map","continent","code","name","CountriesPage","useParams","continentName","setContinentName","countries","setCountries","log","country","style","display","flexDirection","marginBottom","emoji","languages","NotFoundPage","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"wMASeA,EALA,IAAIC,IAAa,CAC9BC,IAHa,qCAIbC,MAAO,IAAIC,M,cCoBEC,EAvBI,WACjB,OACE,qCACE,iCACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,yBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,cAAT,iCAMR,+BACE,cAAC,IAAD,UCTOC,EARM,WACnB,OACE,mCACE,cAAC,IAAD,CAAMD,GAAG,cAAT,gC,wBC8CSE,EA9CY,WAAO,IAAD,EACKC,mBAAS,IADd,mBACxBC,EADwB,KACZC,EADY,KAuB/B,OApBAC,qBAAU,WACRZ,EACGa,MAAM,CACLA,MAAOC,YAAF,qKASNC,MAAK,SAACC,GACLL,EAAcK,EAAOC,KAAKP,eAE3BQ,OAAM,SAACC,GACNC,QAAQC,MAAMF,QAEjB,CAACT,IAGF,mCACGA,EAAWY,OACV,mCACE,6BACGZ,EAAWa,KAAI,SAACC,GACf,OACE,6BACE,eAAC,IAAD,CAAMlB,GAAE,sBAAiBkB,EAAUC,MAAnC,UACE,+BAAOD,EAAUE,OADnB,KACiC,+BAAOF,EAAUC,OADlD,QADOD,EAAUC,aAU3B,gBCgCOE,EAxEW,WAAO,IACvBF,EAASG,cAATH,KADsB,EAGYhB,mBAAS,IAHrB,mBAGvBoB,EAHuB,KAGRC,EAHQ,OAIIrB,mBAAS,IAJb,mBAIvBsB,EAJuB,KAIZC,EAJY,KAkC9B,OA5BApB,qBAAU,WACRZ,EACGa,MAAM,CACLA,MAAOC,YAAF,gVAEkBW,KAcxBV,MAAK,SAACC,GACLc,EAAiBd,EAAOC,KAAKO,UAAUE,MACvCM,EAAahB,EAAOC,KAAKO,UAAUO,cAEpCb,OAAM,SAACC,GACNC,QAAQa,IAAId,QAEf,CAACM,EAAMI,EAAeE,IAGvB,mCACGA,EAAUT,OACT,qCACE,yDAC0BO,EAD1B,KAC2CJ,EAD3C,OAIA,6BACGM,EAAUR,KAAI,SAACW,GACd,OACE,qBAEEC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,aAAc,QALlB,UAQE,0CAAaJ,EAAQR,QACrB,2CAAcQ,EAAQK,SACrBL,EAAQM,UAAUlB,OACjB,+BAAOY,EAAQM,UAAU,GAAGd,OAE5B,uDAZGQ,EAAQK,eAoBvB,gBC9DOE,EARU,WACvB,OACE,mCACE,+DCkBSC,EAfC,WACd,OACE,cAAC,IAAD,UACE,eAAC,EAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,cAAcC,QAAS,cAAC,EAAD,MACnC,cAAC,IAAD,CAAOD,KAAK,oBAAoBC,QAAS,cAAC,EAAD,MAEzC,cAAC,IAAD,CAAOD,KAAK,MAAMC,QAAS,cAAC,EAAD,MAC3B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAUtC,GAAG,iBCH/BuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,CAAgBxD,OAAQA,EAAxB,SACE,cAAC,EAAD,UAINyD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b892b674.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst apiUrl = 'https://countries.trevorblades.com';\n\nconst client = new ApolloClient({\n  uri: apiUrl,\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React, { FC } from 'react';\nimport { Link, Outlet } from 'react-router-dom';\n\nconst Layout: FC = () => {\n  return (\n    <>\n      <header>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home Page</Link>\n            </li>\n            <li>\n              <Link to=\"/continents\">Continents</Link>\n            </li>\n          </ul>\n        </nav>\n      </header>\n\n      <main>\n        <Outlet />\n      </main>\n    </>\n  );\n};\n\nexport default Layout;\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst HomePage: FC = () => {\n  return (\n    <>\n      <Link to=\"/continents\">Continents list</Link>\n    </>\n  );\n};\n\nexport default HomePage;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { gql } from '@apollo/client';\nimport client from '../../Config/graphqlClient';\nimport Continent from '../../Models/Continent.model';\n\nconst ContinentsPage: FC = () => {\n  const [continents, setContinents] = useState([]);\n\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          query GetContinents {\n            continents {\n              code\n              name\n            }\n          }\n        `,\n      })\n      .then((result) => {\n        setContinents(result.data.continents);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, [continents]);\n\n  return (\n    <>\n      {continents.length ? (\n        <>\n          <ul>\n            {continents.map((continent: Continent) => {\n              return (\n                <li key={continent.code}>\n                  <Link to={`/continents/${continent.code}`}>\n                    <span>{continent.name}</span> (<span>{continent.code}</span>)\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      ) : (\n        'Loading...'\n      )}\n    </>\n  );\n};\n\nexport default ContinentsPage;\n","import React, { FC, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { gql } from '@apollo/client';\nimport client from '../../Config/graphqlClient';\nimport Country from '../../Models/Country.model';\n\nconst CountriesPage: FC = () => {\n  const { code } = useParams();\n\n  const [continentName, setContinentName] = useState('');\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    client\n      .query({\n        query: gql`\n          query GetCountries {\n            continent(code: \"${code}\") {\n              name\n              countries {\n                code\n                name\n                emoji\n                languages {\n                  name\n                }\n              }\n            }\n          }\n        `,\n      })\n      .then((result) => {\n        setContinentName(result.data.continent.name);\n        setCountries(result.data.continent.countries);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [code, continentName, countries]);\n\n  return (\n    <>\n      {countries.length ? (\n        <>\n          <h2>\n            Listing countries from {continentName} ({code})\n          </h2>\n\n          <ul>\n            {countries.map((country: Country) => {\n              return (\n                <li\n                  key={country.emoji}\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    marginBottom: '1rem',\n                  }}\n                >\n                  <span>Name: {country.name}</span>\n                  <span>Emoji: {country.emoji}</span>\n                  {country.languages.length ? (\n                    <span>{country.languages[0].name}</span>\n                  ) : (\n                    <span>Language: No data</span>\n                  )}\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      ) : (\n        'Loading...'\n      )}\n    </>\n  );\n};\n\nexport default CountriesPage;\n","import React, { FC } from 'react';\n\nconst NotFoundPage: FC = () => {\n  return (\n    <>\n      <h2>Error 404: Page not found!</h2>\n    </>\n  );\n};\n\nexport default NotFoundPage;\n","import React, { FC } from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport Layout from '../Layout';\nimport HomePage from '../../Routes/HomePage';\nimport ContinentsPage from '../../Routes/ContinentsPage';\nimport CountriesPage from '../../Routes/CountriesPage';\nimport NotFoundPage from '../../Routes/NotFoundPage';\n\nconst App: FC = () => {\n  return (\n    <Routes>\n      <Layout>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"/continents\" element={<ContinentsPage />} />\n        <Route path=\"/continents/:code\" element={<CountriesPage />} />\n\n        <Route path=\"404\" element={<NotFoundPage />} />\n        <Route path=\"*\" element={<Navigate to=\"/404\" />} />\n      </Layout>\n    </Routes>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './Config/graphqlClient';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}